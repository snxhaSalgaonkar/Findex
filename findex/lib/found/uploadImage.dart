import 'package:flutter/material.dart';

class UploadImageScreen extends StatefulWidget {
  @override
  _UploadImageScreenState createState() => _UploadImageScreenState();
}

class _UploadImageScreenState extends State<UploadImageScreen> {
  String? _imagePath;
  String? _description;
  String? _selectedLostItemType; // To store the selected item type
  List<String> _lostItemTypes = [
    'Mobile',
    'Airpods',
    'Earring',
    'Bottle',
    'Wallet',
    'Keys',
    'Other',
  ];

  Future<void> _addImage() async {
    // Implement image adding logic here
    setState(() {
      _imagePath = 'assets/placeholder_image.png'; // Placeholder
    });
  }

  Future<void> _askGeminiForDescription() async {
    if (_imagePath != null) {
      // Implement Gemini description request logic here
      setState(() {
        _description =
            'Description generated by Gemini will appear here.'; // Placeholder
      });
    }
  }

  void _editDescription() {
    // Implement edit description functionality here
    print('Edit description pressed');
  }

  void _submitApplication() {
    // Implement submit application logic here
    if (_selectedLostItemType != null) {
      print('Submitting application for: $_selectedLostItemType');
      // Include _selectedLostItemType in your submission data
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select the type of item lost.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: Text('Upload Image', style: TextStyle(color: Colors.white)),
      ),
      body: SingleChildScrollView(
        // Added SingleChildScrollView for better layout on smaller screens
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            // App Logo
            Container(
              alignment: Alignment.topRight,
              margin: EdgeInsets.only(bottom: 20.0),
              child: Container(
                padding: EdgeInsets.all(8.0),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(5.0),
                ),
                child: Text('App logo', style: TextStyle(fontSize: 16.0)),
              ),
            ),

            // Select Lost Item Type
            Container(
              padding: EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(5.0),
              ),
              child: DropdownButton<String>(
                value: _selectedLostItemType,
                hint: Text('Select item type'),
                isExpanded: true,
                items:
                    _lostItemTypes.map((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedLostItemType = newValue;
                  });
                },
              ),
            ),
            SizedBox(height: 16.0),

            // Add receipt / item image
            GestureDetector(
              onTap: _addImage,
              child: Container(
                height: 80.0,
                decoration: BoxDecoration(
                  color: Colors.grey[400],
                  borderRadius: BorderRadius.circular(5.0),
                ),
                child: Center(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Text(
                        'Add receipt / item image:',
                        style: TextStyle(color: Colors.white),
                      ),
                      SizedBox(width: 8.0),
                      Icon(Icons.add, color: Colors.white),
                    ],
                  ),
                ),
              ),
            ),
            SizedBox(height: 16.0),

            // Ask Gemini for description
            ElevatedButton(
              onPressed: _askGeminiForDescription,
              style: ElevatedButton.styleFrom(),
              child: Text('ask gemini for description'),
            ),
            SizedBox(height: 16.0),

            // Description
            Container(
              height: 80.0,
              padding: EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                color: Colors.grey[400],
                borderRadius: BorderRadius.circular(5.0),
              ),
              alignment: Alignment.topLeft,
              child: Text(
                _description ?? 'description',
                style: TextStyle(color: Colors.white),
              ),
            ),
            SizedBox(height: 8.0),

            // Edit description
            Align(
              alignment: Alignment.bottomRight,
              child: ElevatedButton(
                onPressed: _editDescription,
                style: ElevatedButton.styleFrom(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(5.0),
                  ),
                ),
                child: Text('edit description'),
              ),
            ),
            SizedBox(height: 32.0),

            // Submit application
            ElevatedButton(
              onPressed: _submitApplication,
              style: ElevatedButton.styleFrom(),
              child: Text('submit application'),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        height: 60.0,
        color: Colors.yellow,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: <Widget>[
            IconButton(
              icon: Icon(Icons.add, size: 30.0),
              onPressed: () {
                // Handle navigation to the '+' screen
                print('Navigate to Add screen');
              },
            ),
            IconButton(
              icon: Icon(Icons.home, size: 30.0),
              onPressed: () {
                // Handle navigation to the home screen
                print('Navigate to Home screen');
              },
            ),
            IconButton(
              icon: Icon(Icons.person, size: 30.0),
              onPressed: () {
                // Handle navigation to the profile screen
                print('Navigate to Profile screen');
              },
            ),
          ],
        ),
      ),
    );
  }
}
